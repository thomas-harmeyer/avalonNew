{"version":3,"sources":["components/Links.tsx","interfaces/Game.ts","interfaces/Roles.ts","components/Navbar.tsx","components/views/About.tsx","components/context/socket.ts","components/context/GameContext.ts","components/views/SuggestedMissions.tsx","components/views/GameView.tsx","components/views/Join.tsx","components/LobbyNameList.tsx","components/views/Lobby.tsx","components/views/Login.tsx","components/views/Role.tsx","components/views/Settings.tsx","components/views/Welcome.tsx","components/views/ResultView.tsx","components/Merlin.tsx","App.tsx","index.tsx"],"names":["Links","MissionState","Roles","GoodRoles","BadRoles","Navbar","bg","variant","Container","fluid","className","Nav","Row","Col","to","Link","Login","Settings","Brand","About","getKnownRoles","user","users","knownRoles","role","_id","Merlin","BadKnight","Assassin","Morgana","Minion","forEach","isBad","push","Percival","MerlinOrMorgana","getUsername","localStorage","getItem","getOpe","ope","socket","io","autoConnect","reconnection","reconnectionDelay","reconnectionDelayMax","reconnectionAttempts","tryConnect","connected","console","log","auth","username","id","Date","now","on","connect","GameContext","createContext","totalPlayers","roles","missions","missionData","state","Suggesting","onMission","passedMissions","failedMissions","hasStarted","SuggestedMissions","loadedMissions","setSelectedUsers","selectedUsers","handleSuggest","handleVote","handlePass","canSuggest","game","useContext","length","hasVoted","voteData","userVotes","find","userVote","index","hasPassed","userResults","userResult","areSuggested","suggestedUsers","Table","bordered","map","mission","j","i","suggester","undefined","passed","missionUser","onClick","numOfPlayers","filter","userFilter","selectedUsersTemp","pop","handleSelectUser","data","style","color","numOfFails","Button","Voting","GameView","useState","setPassedMissions","loadedMission","setLoadedMission","lastOnMission","setLastOnMission","setOnMission","error","setError","setCanSuggest","useEffect","a","passedMissionsTemp","missionArray","setData","result","Alert","CloseButton","Card","Body","emit","vote","success","Join","setOpe","InputGroup","FormControl","placeholder","onChange","event","setItem","storeOpe","target","value","LobbyNameList","props","xs","text","Lobby","settingsHaveBeenUpdated","sessionStorage","redirectToSettings","setRedirectToSettings","redirectToGame","setRedirectToGame","restartGame","startGame","group","groupEnd","Spinner","animation","setUsername","redirect","setRedirect","removeItem","disconnect","Form","Group","controlId","Label","Control","storeUsername","Role","knownUsers","setKnownUsers","RolesArray","ButtonGroup","includes","roleFilter","setRole","totalPlayer","count","Welcome","ResultView","isGood","selectedUser","setSelectedUser","Result","isAssassin","goodUsers","App","setGame","path","component","exact","Provider","Game","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.60fbab03.chunk.js","sourcesContent":["enum Links {\r\n  Welcome = \"/\",\r\n  Join = \"/join\",\r\n  Lobby = \"/lobby\",\r\n  Settings = \"/settings\",\r\n  Game = \"/game\",\r\n  About = \"/about\",\r\n  Login = \"/login\",\r\n  Role = \"/role\",\r\n  Merlin = \"/merlin\",\r\n  Result = \"/result\",\r\n}\r\nexport default Links;\r\n","import User from \"../interfaces/User\";\r\nimport Mission from \"./Mission\";\r\nimport Roles from \"./Roles\";\r\n\r\ninterface Game {\r\n  missions: Mission[][];\r\n  users: User[];\r\n  ope: string;\r\n  missionData: GameMissionMetadata;\r\n  roles: Roles[];\r\n  totalPlayers: number;\r\n  hasStarted: boolean;\r\n  result?: boolean;\r\n}\r\n\r\nexport interface GameMissionMetadata {\r\n  state: MissionState;\r\n  onMission: number;\r\n  passedMissions: number;\r\n  failedMissions: number;\r\n  result?: boolean;\r\n}\r\n\r\nexport enum MissionState {\r\n  Suggesting = \"suggesting\",\r\n  Voting = \"voting\",\r\n  onMission = \"onMission\",\r\n}\r\nexport default Game;\r\n","import User from \"./User\";\r\n\r\nexport enum Roles {\r\n  GoodKnight = \"Good Knight\",\r\n  BadKnight = \"Bad Knight\",\r\n  Assassin = \"Assassin\",\r\n  Merlin = \"Merlin\",\r\n  Percival = \"Percival\",\r\n  Morgana = \"Morgana\",\r\n  Minion = \"Minion\",\r\n  MerlinOrMorgana = \"Merlin or Morgana\",\r\n}\r\n\r\nexport enum GoodRoles {\r\n  GoodKnight = \"Good Knight\",\r\n  Merlin = \"Merlin\",\r\n  Percival = \"Percival\",\r\n}\r\n\r\nexport enum BadRoles {\r\n  BadKnight = \"Bad Knight\",\r\n  Morgana = \"Morgana\",\r\n  Minion = \"Minion\",\r\n}\r\n\r\nexport function getKnownRoles(user: User | undefined, users: User[]) {\r\n  if (!user) {\r\n    return [];\r\n  }\r\n  const knownRoles: User[] = [];\r\n  const role = user.role;\r\n  const _id = user._id;\r\n  if (\r\n    role === Roles.Merlin ||\r\n    role === Roles.BadKnight ||\r\n    role === Roles.Assassin ||\r\n    role === Roles.Morgana ||\r\n    role === Roles.Minion\r\n  ) {\r\n    users.forEach((user: User) => {\r\n      if (_id !== user._id && isBad(user)) {\r\n        knownRoles.push(user);\r\n      }\r\n    });\r\n  } else if (role === Roles.Percival) {\r\n    users.forEach((user: User) => {\r\n      if (\r\n        _id !== user._id &&\r\n        (user.role === Roles.Merlin || user.role === Roles.Morgana)\r\n      ) {\r\n        user.role = Roles.MerlinOrMorgana;\r\n        knownRoles.push(user);\r\n      }\r\n    });\r\n  }\r\n  return knownRoles;\r\n}\r\n\r\nexport function isBad(user: User) {\r\n  const role = user.role;\r\n  return (\r\n    role === Roles.BadKnight ||\r\n    role === Roles.Assassin ||\r\n    role === Roles.Morgana\r\n  );\r\n}\r\n\r\nexport default Roles;\r\n","import Col from \"react-bootstrap/Col\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Nav from \"react-bootstrap/Nav\";\r\nimport BootstrapNavbar from \"react-bootstrap/Navbar\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport { FaCog } from \"react-icons/fa\";\r\nimport { LinkContainer } from \"react-router-bootstrap\";\r\nimport Links from \"./Links\";\r\n\r\nconst Navbar = () => {\r\n  return (\r\n    <BootstrapNavbar bg=\"dark\" variant=\"dark\">\r\n      <Container fluid className=\"justify-content-end\">\r\n        <Nav className=\"me-auto\">\r\n          <Row>\r\n            <Col>\r\n              <LinkContainer to=\"/\">\r\n                <Nav.Link>Home</Nav.Link>\r\n              </LinkContainer>\r\n            </Col>\r\n          </Row>\r\n        </Nav>\r\n        <Nav>\r\n          <LinkContainer to={Links.Login}>\r\n            <Nav.Link>Login</Nav.Link>\r\n          </LinkContainer>\r\n          <LinkContainer to={Links.Settings}>\r\n            <BootstrapNavbar.Brand>\r\n              <Row>\r\n                <Col>\r\n                  <FaCog />\r\n                </Col>\r\n              </Row>\r\n            </BootstrapNavbar.Brand>\r\n          </LinkContainer>\r\n        </Nav>\r\n      </Container>\r\n    </BootstrapNavbar>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import { Link } from \"react-router-dom\";\r\n\r\nconst About = () => {\r\n  return (\r\n    <div>\r\n      <h4>Version 1.0.0</h4>\r\n      <Link to=\"/\">Go Back</Link>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default About;\r\n","import io from \"socket.io-client\";\r\n\r\nconst link = \"https://reactalon-v9t9j.ondigitalocean.app/lobby\";\r\nexport function getUsername() {\r\n  return localStorage.getItem(\"username\");\r\n}\r\n\r\nexport function getOpe(): string {\r\n  const ope = localStorage.getItem(\"ope\");\r\n  if (ope !== null) return ope;\r\n  else return \"ope\";\r\n}\r\n\r\nexport const socket = io(link, {\r\n  autoConnect: false,\r\n  reconnection: true,\r\n  reconnectionDelay: 1000,\r\n  reconnectionDelayMax: 5000,\r\n  reconnectionAttempts: 5,\r\n});\r\n\r\nexport function tryConnect() {\r\n  if (!socket.connected) {\r\n    console.log(\"try connecting\");\r\n    if (getUsername() && getOpe()) {\r\n      socket.auth = {\r\n        username: getUsername(),\r\n        id: `${Date.now()}`,\r\n        ope: getOpe(),\r\n      };\r\n      socket.on(\"connected\", () => {\r\n        console.log(\"connected\");\r\n      });\r\n      socket.connect();\r\n    }\r\n  }\r\n}\r\n\r\nexport function reconnect() {\r\n  socket.disconnect();\r\n  tryConnect();\r\n}\r\ntryConnect();\r\n\r\nexport default socket;\r\n","import { createContext } from \"react\";\r\nimport Game, { MissionState } from \"../../interfaces/Game\";\r\nimport Roles from \"../../interfaces/Roles\";\r\nimport { getOpe } from \"./socket\";\r\n\r\nexport const GameContext = createContext({\r\n  ope: getOpe(),\r\n  users: [],\r\n  totalPlayers: 0,\r\n  roles: [Roles.Merlin, Roles.Percival, Roles.Assassin, Roles.Morgana],\r\n  missions: [],\r\n  missionData: {\r\n    state: MissionState.Suggesting,\r\n    onMission: 0,\r\n    passedMissions: 0,\r\n    failedMissions: 0,\r\n  },\r\n  hasStarted: false,\r\n} as Game);\r\n\r\nexport default GameContext;\r\n","import { useContext } from \"react\";\r\nimport { Button, Col, Row, Table } from \"react-bootstrap\";\r\nimport {\r\n  FaCheck,\r\n  FaQuestion,\r\n  FaThumbsDown,\r\n  FaThumbsUp,\r\n  FaTimes,\r\n} from \"react-icons/fa\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { MissionState } from \"../../interfaces/Game\";\r\nimport Mission, { UserVote } from \"../../interfaces/Mission\";\r\nimport User from \"../../interfaces/User\";\r\nimport GameContext from \"../context/GameContext\";\r\nimport socket from \"../context/socket\";\r\n\r\ntype SuggestedMissionProps = {\r\n  loadedMissions: Mission[];\r\n  setSelectedUsers: React.Dispatch<React.SetStateAction<User[]>>;\r\n  selectedUsers: User[];\r\n  handleSuggest: () => void;\r\n  handleVote: (vote: boolean) => void;\r\n  handlePass: (success: boolean) => void;\r\n  onMission: number;\r\n  canSuggest: boolean;\r\n};\r\n\r\nconst SuggestedMissions = ({\r\n  loadedMissions,\r\n  setSelectedUsers,\r\n  selectedUsers,\r\n  handleSuggest,\r\n  handleVote,\r\n  handlePass,\r\n  onMission,\r\n  canSuggest,\r\n}: SuggestedMissionProps) => {\r\n  console.log(\"on mission \" + onMission);\r\n  const game = useContext(GameContext);\r\n  console.log(game);\r\n  if (game.missions.length === 0) {\r\n    return <Redirect to=\"/lobby\" />;\r\n  }\r\n\r\n  const hasVoted = game.missions[game.missionData.onMission][\r\n    game.missions[game.missionData.onMission].length - 1\r\n  ].voteData?.userVotes.find((userVote, index) => {\r\n    return userVote.user._id === socket.id;\r\n  })\r\n    ? true\r\n    : false;\r\n  const hasPassed = game.missions[game.missionData.onMission][\r\n    game.missions[game.missionData.onMission].length - 1\r\n  ].userResults.find((userResult, index) => {\r\n    return userResult.user._id === socket.id;\r\n  })\r\n    ? true\r\n    : false;\r\n  const areSuggested = loadedMissions[onMission].suggestedUsers.find(\r\n    (user, index) => {\r\n      return user._id === socket.id;\r\n    }\r\n  )\r\n    ? true\r\n    : false;\r\n\r\n  function handleSelectUser(user: User, numOfPlayers: number) {\r\n    if (game.missionData.state === MissionState.Suggesting && canSuggest)\r\n      if (\r\n        selectedUsers.filter((userFilter: User) => {\r\n          return userFilter._id === user._id;\r\n        }).length > 0\r\n      ) {\r\n        setSelectedUsers((selectedUsers) =>\r\n          selectedUsers.filter((userFilter: User) => {\r\n            return userFilter._id !== user._id;\r\n          })\r\n        );\r\n      } else {\r\n        if (selectedUsers.length < numOfPlayers) {\r\n          setSelectedUsers((selectedUsers) => [...selectedUsers, user]);\r\n        } else {\r\n          let selectedUsersTemp = selectedUsers;\r\n          selectedUsersTemp.pop();\r\n          setSelectedUsers([...selectedUsersTemp, user]);\r\n        }\r\n      }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Row>\r\n        <Col>\r\n          <Table bordered className=\"\">\r\n            <thead>\r\n              <tr key={\"loadedMission\"}>\r\n                <td>User</td>\r\n                {loadedMissions.map((mission: Mission, j: number) => (\r\n                  <td key={\"suggestedMissions:\" + j}>{j + 1}</td>\r\n                ))}\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {game.users.map((user: User, i: number) => (\r\n                <tr key={\"user\" + i}>\r\n                  <td\r\n                    className={\r\n                      game.missions[onMission][\r\n                        game.missions[onMission].length - 1\r\n                      ].suggester?._id === user._id\r\n                        ? \"bg-primary\"\r\n                        : \"\"\r\n                    }\r\n                  >\r\n                    {user.username}\r\n                  </td>\r\n                  {loadedMissions.map((mission: Mission, j) => (\r\n                    <td\r\n                      key={\"suggestedMissions2:\" + j}\r\n                      className={\r\n                        mission.suggester &&\r\n                        mission.suggester._id === user._id &&\r\n                        mission.passed !== undefined\r\n                          ? !mission.suggestedUsers.find(\r\n                              (missionUser: User) => {\r\n                                return missionUser._id === user._id;\r\n                              }\r\n                            )\r\n                            ? \"bg-warning\"\r\n                            : mission.passed\r\n                            ? \"bg-success\"\r\n                            : \"bg-danger\"\r\n                          : mission.suggestedUsers.find((missionUser: User) => {\r\n                              return missionUser._id === user._id;\r\n                            })\r\n                          ? mission.passed === undefined\r\n                            ? \"bg-secondary\"\r\n                            : mission.passed\r\n                            ? \"bg-secondary\"\r\n                            : \"bg-secondary\"\r\n                          : selectedUsers?.find((missionUser: User) => {\r\n                              return missionUser._id === user._id;\r\n                            }) && j === onMission\r\n                          ? \"bg-info\"\r\n                          : \"\"\r\n                      }\r\n                      onClick={() =>\r\n                        handleSelectUser(user, mission.data.numOfPlayers)\r\n                      }\r\n                    >\r\n                      {!(mission && j <= onMission) ? (\r\n                        j === onMission && <FaQuestion />\r\n                      ) : (\r\n                        <>\r\n                          {mission.voteData?.userVotes?.find(\r\n                            (userVote: UserVote) => {\r\n                              return userVote.user._id === user._id;\r\n                            }\r\n                          )?.passed === undefined ? (\r\n                            <FaQuestion />\r\n                          ) : mission.voteData.userVotes.length !==\r\n                            game.totalPlayers ? (\r\n                            <FaQuestion />\r\n                          ) : mission.voteData?.userVotes?.find(\r\n                              (userVote: UserVote) => {\r\n                                return userVote.user._id === user._id;\r\n                              }\r\n                            )?.passed ? (\r\n                            <FaCheck\r\n                              style={{\r\n                                color:\r\n                                  mission.passed === undefined\r\n                                    ? \"green\"\r\n                                    : mission.passed\r\n                                    ? \"green\"\r\n                                    : \"red\",\r\n                              }}\r\n                            />\r\n                          ) : (\r\n                            <FaTimes\r\n                              style={{\r\n                                color:\r\n                                  mission.passed === undefined\r\n                                    ? \"red\"\r\n                                    : !mission.passed\r\n                                    ? \"green\"\r\n                                    : \"red\",\r\n                              }}\r\n                            />\r\n                          )}\r\n                        </>\r\n                      )}\r\n                    </td>\r\n                  ))}\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n            <tfoot>\r\n              <tr>\r\n                <td># of players</td>\r\n                {loadedMissions.map((mission: Mission, j: number) => (\r\n                  <td key={\"suggestedMissionsNumOfPlayers:\" + j}>\r\n                    {mission.data.numOfPlayers}\r\n                    {mission.data.numOfFails > 1 && \"!\"}\r\n                  </td>\r\n                ))}\r\n              </tr>\r\n            </tfoot>\r\n          </Table>\r\n        </Col>\r\n      </Row>\r\n      {game.missionData.state === MissionState.Suggesting && (\r\n        <Row>\r\n          <Col>\r\n            <Button variant=\"primary\" onClick={() => handleSuggest()}>\r\n              Suggest\r\n            </Button>\r\n          </Col>\r\n        </Row>\r\n      )}\r\n      {game.missionData.state === MissionState.Voting && !hasVoted && (\r\n        <Row>\r\n          <Col>\r\n            <FaThumbsUp\r\n              style={{ color: \"green\" }}\r\n              onClick={() => handleVote(true)}\r\n            />\r\n          </Col>\r\n          <Col>\r\n            <FaThumbsDown\r\n              style={{ color: \"red\" }}\r\n              onClick={() => handleVote(false)}\r\n            />\r\n          </Col>\r\n        </Row>\r\n      )}\r\n      {game.missionData.state === MissionState.onMission &&\r\n        !hasPassed &&\r\n        areSuggested && (\r\n          <Row>\r\n            <Col>\r\n              <FaCheck\r\n                style={{ color: \"green\" }}\r\n                onClick={() => {\r\n                  handlePass(true);\r\n                }}\r\n              />\r\n            </Col>\r\n            <Col>\r\n              <FaTimes\r\n                style={{ color: \"red\" }}\r\n                onClick={() => {\r\n                  handlePass(false);\r\n                }}\r\n              />\r\n            </Col>\r\n          </Row>\r\n        )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SuggestedMissions;\r\n","import { useContext, useEffect, useState } from \"react\";\r\nimport { Alert, Card, CloseButton, Col, Row, Table } from \"react-bootstrap\";\r\nimport { FaCheck, FaQuestion, FaTimes } from \"react-icons/fa\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { MissionState } from \"../../interfaces/Game\";\r\nimport Mission from \"../../interfaces/Mission\";\r\nimport User from \"../../interfaces/User\";\r\nimport GameContext from \"../context/GameContext\";\r\nimport socket from \"../context/socket\";\r\nimport SuggestedMissions from \"./SuggestedMissions\";\r\n\r\nconst GameView = () => {\r\n  const game = useContext(GameContext);\r\n\r\n  const [passedMissions, setPassedMissions] = useState<Mission[]>([]);\r\n  const [loadedMission, setLoadedMission] = useState<number>(-1);\r\n  const [selectedUsers, setSelectedUsers] = useState<User[]>([]);\r\n  const [lastOnMission, setLastOnMission] = useState<[number, number]>([0, 0]);\r\n  const [onMission, setOnMission] = useState<number>(0);\r\n  const [error, setError] = useState<string>();\r\n  const [canSuggest, setCanSuggest] = useState<boolean>(true);\r\n\r\n  useEffect(() => {\r\n    const setData = async () => {\r\n      //set passed missions\r\n      if (game.missions.length) {\r\n        const passedMissionsTemp: Mission[] = [];\r\n        game.missions.forEach((missionArray, i) => {\r\n          passedMissionsTemp.push(missionArray[missionArray.length - 1]);\r\n        });\r\n        setPassedMissions(passedMissionsTemp);\r\n\r\n        const mission =\r\n          loadedMission === -1\r\n            ? game.missions[game.missionData.onMission][\r\n                game.missions[game.missionData.onMission].length - 1\r\n              ]\r\n            : game.missions[loadedMission][\r\n                game.missions[loadedMission].length - 1\r\n              ];\r\n        if (game.missionData.state === MissionState.Voting) {\r\n          setSelectedUsers(mission.suggestedUsers);\r\n        }\r\n        //if new mission\r\n        if (\r\n          lastOnMission[0] !== game.missionData.onMission ||\r\n          lastOnMission[1] !== game.missions[game.missionData.onMission].length\r\n        ) {\r\n          setSelectedUsers([]);\r\n          setLoadedMission(game.missionData.onMission);\r\n          setOnMission(game.missions[game.missionData.onMission].length - 1);\r\n          setCanSuggest(true);\r\n          setLastOnMission([\r\n            game.missionData.onMission,\r\n            game.missions[game.missionData.onMission].length,\r\n          ] as [number, number]);\r\n        }\r\n      }\r\n    };\r\n    //run fetch data\r\n    setData();\r\n  }, [\r\n    game.missionData.onMission,\r\n    game.missionData.state,\r\n    game.missions,\r\n    lastOnMission,\r\n    loadedMission,\r\n  ]);\r\n\r\n  function handleVote(vote: boolean) {\r\n    console.log(\"user-vote\");\r\n    socket.emit(\"user-vote\", vote);\r\n  }\r\n  function handleSuggest() {\r\n    console.log(\"user-suggest\");\r\n    const mission =\r\n      game.missions[game.missionData.onMission][\r\n        game.missions[game.missionData.onMission].length - 1\r\n      ];\r\n    if (selectedUsers.length === mission.data.numOfPlayers) {\r\n      socket.emit(\"user-suggest\", selectedUsers);\r\n      setSelectedUsers([]);\r\n    } else {\r\n      setError(\"You must select the correct number of users\");\r\n    }\r\n  }\r\n  function handleSuccess(success: boolean) {\r\n    console.log(\"user-passed\");\r\n    socket.emit(\"user-passed\", success);\r\n  }\r\n\r\n  if (game.hasStarted === false) {\r\n    return <Redirect to=\"/lobby\" />;\r\n  }\r\n\r\n  if (game.missionData.result !== undefined) {\r\n    return <Redirect to=\"/merlin\" />;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {error && (\r\n        <Row\r\n          onClick={() => {\r\n            setError(undefined);\r\n          }}\r\n        >\r\n          <Col>\r\n            <Alert variant={\"danger\"}>\r\n              {error}\r\n              <hr />\r\n              <CloseButton />\r\n            </Alert>\r\n          </Col>\r\n        </Row>\r\n      )}\r\n      <Row>\r\n        <Col>\r\n          <Card\r\n            bg={loadedMission === -1 ? \"primary\" : \"light\"}\r\n            onClick={() => {\r\n              setLoadedMission(-1);\r\n              setOnMission(game.missionData.onMission);\r\n              setCanSuggest(true);\r\n            }}\r\n          >\r\n            <Card.Body>Passed Missions</Card.Body>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col>\r\n          <Table>\r\n            <tbody>\r\n              <tr>\r\n                {game.missions.map((mission, i) => (\r\n                  <td key={\"mission: \" + i}>\r\n                    <Card\r\n                      bg={loadedMission === i ? \"primary\" : \"light\"}\r\n                      onClick={() => {\r\n                        setLoadedMission(i);\r\n                        if (i === game.missionData.onMission) {\r\n                          setOnMission(game.missions[i].length - 1);\r\n                          setCanSuggest(true);\r\n                        } else {\r\n                          setOnMission(game.missions[i].length - 1);\r\n                          setCanSuggest(false);\r\n                        }\r\n                      }}\r\n                    >\r\n                      <Card.Body>\r\n                        {mission[mission.length - 1].passed === undefined ? (\r\n                          <FaQuestion />\r\n                        ) : mission[mission.length - 1].passed ? (\r\n                          <FaCheck style={{ color: \"green\" }} />\r\n                        ) : (\r\n                          <FaTimes style={{ color: \"red\" }} />\r\n                        )}\r\n                      </Card.Body>\r\n                    </Card>\r\n                  </td>\r\n                ))}\r\n              </tr>\r\n            </tbody>\r\n          </Table>\r\n        </Col>\r\n      </Row>\r\n      {passedMissions.length > 0 && (\r\n        <SuggestedMissions\r\n          loadedMissions={\r\n            loadedMission === -1 ? passedMissions : game.missions[loadedMission]\r\n          }\r\n          selectedUsers={selectedUsers}\r\n          setSelectedUsers={setSelectedUsers}\r\n          handleSuggest={handleSuggest}\r\n          handleVote={handleVote}\r\n          handlePass={handleSuccess}\r\n          onMission={onMission}\r\n          canSuggest={canSuggest}\r\n        ></SuggestedMissions>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GameView;\r\n","import { useState } from \"react\";\r\nimport { Button, Col, FormControl, InputGroup, Row } from \"react-bootstrap\";\r\nimport { LinkContainer } from \"react-router-bootstrap\";\r\n\r\nconst Join = () => {\r\n  const [ope, setOpe] = useState(localStorage.getItem(\"ope\"));\r\n\r\n  function storeOpe(ope: string) {\r\n    localStorage.setItem(\"ope\", ope);\r\n    setOpe(ope);\r\n  }\r\n  return (\r\n    <>\r\n      <Row>\r\n        <Col>\r\n          <p>\r\n            Your O.P.E. is any code you choose, just make sure everyone chooses\r\n            the same O.P.E.\r\n          </p>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col>\r\n          <InputGroup>\r\n            <FormControl\r\n              placeholder={ope ? ope : \"O.P.E.\"}\r\n              onChange={(event) => {\r\n                storeOpe(event.target.value);\r\n              }}\r\n            />\r\n            <LinkContainer to=\"/lobby\">\r\n              <Button>Submit</Button>\r\n            </LinkContainer>\r\n          </InputGroup>\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Join;\r\n","import { Card, Col } from \"react-bootstrap\";\r\nimport User from \"../interfaces/User\";\r\n\r\ntype LobbyNameListProps = {\r\n  users: User[];\r\n};\r\n\r\nconst LobbyNameList = (props: LobbyNameListProps) => {\r\n  return (\r\n    <>\r\n      {props.users.map((user, i) => (\r\n        <Col xs={6} key={\"user:\" + i}>\r\n          <Card bg=\"secondary\" text=\"light\" className=\"mt-1\">\r\n            <Card.Body>{user.username}</Card.Body>\r\n          </Card>\r\n        </Col>\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LobbyNameList;\r\n","import { useEffect, useState, useContext } from \"react\";\r\nimport { Alert, Button, Col, Row, Spinner } from \"react-bootstrap\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport GameContext from \"../context/GameContext\";\r\nimport socket, { tryConnect } from \"../context/socket\";\r\nimport LobbyNameList from \"../LobbyNameList\";\r\n\r\nconst Lobby = () => {\r\n  const game = useContext(GameContext);\r\n  const settingsHaveBeenUpdated = sessionStorage.getItem(\r\n    \"settingsHaveBeenUpdated\"\r\n  );\r\n  const [redirectToSettings, setRedirectToSettings] = useState<boolean>(false);\r\n  const [redirectToGame, setRedirectToGame] = useState<boolean>(false);\r\n  const [error, setError] = useState<string>();\r\n  useEffect(() => {\r\n    tryConnect();\r\n\r\n    function checkLobby() {\r\n      if (game?.users.length === 1 && !settingsHaveBeenUpdated) {\r\n        sessionStorage.setItem(\"settingsHaveBeenUpdated\", \"true\");\r\n        setRedirectToSettings(true);\r\n      } else {\r\n        sessionStorage.setItem(\"settingsHaveBeenUpdated\", \"true\");\r\n      }\r\n    }\r\n    checkLobby();\r\n  }, [game?.users.length, settingsHaveBeenUpdated]);\r\n\r\n  if (!localStorage.getItem(\"username\")) {\r\n    return <Redirect to=\"login\" />;\r\n  }\r\n  if (redirectToSettings) {\r\n    return <Redirect to=\"/settings\" />;\r\n  }\r\n  if (redirectToGame) {\r\n    return <Redirect to=\"/role\" />;\r\n  }\r\n  function restartGame() {\r\n    socket.emit(\"restart-game\");\r\n  }\r\n  function startGame() {\r\n    if (!game?.totalPlayers) {\r\n      setError(\"You need to update the settings first\");\r\n      return;\r\n    }\r\n    console.group(\"number of users\");\r\n    console.groupEnd();\r\n\r\n    if (game && game.users.length === game.totalPlayers) {\r\n      socket.emit(\"start-game\");\r\n      setRedirectToGame(true);\r\n    } else {\r\n      setError(\"You need to have the correct number of players\");\r\n    }\r\n  }\r\n  const loadedLobby = () => {\r\n    return (\r\n      <>\r\n        {game.hasStarted ? (\r\n          <Row>\r\n            <Col>\r\n              The Game has started\r\n              <br />\r\n              <Button variant=\"danger\" onClick={restartGame}>\r\n                Click here to restart game\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n        {error && (\r\n          <Row\r\n            onClick={() => {\r\n              setError(undefined);\r\n            }}\r\n          >\r\n            <Col>\r\n              <Alert variant={\"danger\"}>{error}</Alert>\r\n            </Col>\r\n          </Row>\r\n        )}\r\n        <Row>\r\n          <Col>\r\n            <h1>OPE: {game && game.ope ? game.ope : 0}</h1>\r\n          </Col>\r\n        </Row>\r\n        <br />\r\n        <Row>\r\n          <Col>\r\n            <h1>\r\n              {game.users ? game.users.length : 0}/\r\n              {game.totalPlayers ? game.totalPlayers : \"?\"} Players\r\n            </h1>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          {game && game.users && game.users.length > 0 && (\r\n            <LobbyNameList users={game.users}></LobbyNameList>\r\n          )}\r\n        </Row>\r\n        <Row className=\"mt-3\">\r\n          <Col>\r\n            <Button variant=\"outline-success\" onClick={startGame}>\r\n              Start Game\r\n            </Button>\r\n          </Col>\r\n        </Row>\r\n      </>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {game ? (\r\n        loadedLobby()\r\n      ) : (\r\n        <span>\r\n          <Spinner animation=\"grow\" variant=\"primary\" />\r\n        </span>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Lobby;\r\n","import { useState } from \"react\";\r\nimport { Button, Form } from \"react-bootstrap\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { reconnect } from \"../context/socket\";\r\n\r\nconst Login = () => {\r\n  const [username, setUsername] = useState(localStorage.getItem(\"username\"));\r\n  const [ope, setOpe] = useState(localStorage.getItem(\"ope\"));\r\n  const [redirect, setRedirect] = useState(false);\r\n  function storeUsername(username: string) {\r\n    localStorage.setItem(\"username\", username);\r\n    setUsername(username);\r\n  }\r\n  function storeOpe(ope: string) {\r\n    localStorage.setItem(\"ope\", ope);\r\n    sessionStorage.removeItem(\"settingsHaveBeenUpdated\");\r\n    reconnect();\r\n    setOpe(ope);\r\n  }\r\n  if (redirect) {\r\n    return <Redirect to=\"/lobby\" />;\r\n  }\r\n  return (\r\n    <>\r\n      <Row>\r\n        <Col>\r\n          <Form>\r\n            <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\r\n              <Form.Label>Username</Form.Label>\r\n              <Form.Control\r\n                value={username ? username : \"\"}\r\n                placeholder={username ? username : \"\"}\r\n                onChange={(event) => {\r\n                  storeUsername(event.target.value);\r\n                }}\r\n              />\r\n            </Form.Group>\r\n            <Form.Group className=\"mb-3\" controlId=\"formBasicPassword\">\r\n              <Form.Label>OPE</Form.Label>\r\n              <Form.Control\r\n                placeholder={ope ? ope : \"O.P.E.\"}\r\n                value={ope ? ope : \"\"}\r\n                onChange={(event) => {\r\n                  storeOpe(event.target.value);\r\n                }}\r\n              />\r\n            </Form.Group>\r\n            <Button variant=\"primary\" onClick={() => setRedirect(true)}>\r\n              Submit\r\n            </Button>\r\n          </Form>\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import { useEffect, useState } from \"react\";\r\nimport { Button, Card, Col, Row } from \"react-bootstrap\";\r\nimport { LinkContainer } from \"react-router-bootstrap\";\r\nimport { getKnownRoles } from \"../../interfaces/Roles\";\r\nimport User from \"../../interfaces/User\";\r\nimport GameContext from \"../context/GameContext\";\r\nimport socket, { tryConnect } from \"../context/socket\";\r\nimport { useContext } from \"react\";\r\n\r\nconst Role = () => {\r\n  const game = useContext(GameContext);\r\n\r\n  const [knownUsers, setKnownUsers] = useState<User[]>();\r\n\r\n  useEffect(() => {\r\n    tryConnect();\r\n\r\n    function updateLobby() {\r\n      game.users.forEach((user: User) => {\r\n        if (user._id === socket.id) {\r\n          setKnownUsers(getKnownRoles(user, game.users));\r\n        }\r\n      });\r\n    }\r\n    updateLobby();\r\n  }, [game.users]);\r\n\r\n  return (\r\n    <div>\r\n      <h4>\r\n        Your Role is{\" \"}\r\n        {game.users.find((user: User) => user._id === socket.id)?.role}\r\n      </h4>\r\n      <Row>\r\n        {knownUsers &&\r\n          knownUsers.map((user, i) => (\r\n            <Col xs={6} key={\"user:\" + user._id}>\r\n              <Card bg=\"secondary\" text=\"light\" className=\"mt-1\">\r\n                <Card.Body>\r\n                  {user.username}\r\n                  {\": \"}\r\n                  {user.role}\r\n                </Card.Body>\r\n              </Card>\r\n            </Col>\r\n          ))}\r\n      </Row>\r\n      <Row className=\"mt-3\">\r\n        <Col>\r\n          <LinkContainer to=\"/game\">\r\n            <Button>Start Game</Button>\r\n          </LinkContainer>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Role;\r\n","import { useContext } from \"react\";\r\nimport { Button, ButtonGroup, Row } from \"react-bootstrap\";\r\nimport { LinkContainer } from \"react-router-bootstrap\";\r\nimport Roles from \"../../interfaces/Roles\";\r\nimport GameContext from \"../context/GameContext\";\r\nimport socket from \"../context/socket\";\r\n\r\nconst Settings = () => {\r\n  const game = useContext(GameContext);\r\n  const totalPlayersArray: number[] = [5, 6, 7, 8, 9, 10];\r\n  const RolesArray: Roles[] = [\r\n    Roles.Merlin,\r\n    Roles.Percival,\r\n    Roles.Assassin,\r\n    Roles.Morgana,\r\n  ];\r\n  function setTotalPlayers(count: number) {\r\n    game.totalPlayers = count;\r\n    socket.emit(\"update-game\", game);\r\n  }\r\n\r\n  function setRole(role: Roles) {\r\n    if (game.roles.includes(role)) {\r\n      game.roles = game.roles.filter((roleFilter) => {\r\n        return roleFilter !== role;\r\n      });\r\n    } else {\r\n      game.roles.push(role);\r\n    }\r\n    socket.emit(\"update-game\", game);\r\n  }\r\n  return (\r\n    <div>\r\n      <br />\r\n      <Row>\r\n        <p>Which characters would you like to play with?</p>\r\n        <ButtonGroup>\r\n          {RolesArray.map((role: Roles) => (\r\n            <Button\r\n              key={role}\r\n              variant={game.roles.includes(role) ? \"primary\" : \"secondary\"}\r\n              onClick={() => setRole(role)}\r\n            >\r\n              {role}\r\n            </Button>\r\n          ))}\r\n        </ButtonGroup>\r\n      </Row>\r\n      <br />\r\n      <Row>\r\n        <p>How many players are there?</p>\r\n        <ButtonGroup>\r\n          {totalPlayersArray.map((totalPlayer, index) => (\r\n            <Button\r\n              key={totalPlayer}\r\n              variant={\r\n                game.totalPlayers === totalPlayer ? \"primary\" : \"secondary\"\r\n              }\r\n              onClick={() => setTotalPlayers(totalPlayer)}\r\n            >\r\n              {totalPlayer}\r\n            </Button>\r\n          ))}\r\n        </ButtonGroup>\r\n      </Row>\r\n      <br />\r\n      <Row>\r\n        <LinkContainer to=\"/lobby\">\r\n          <Button variant=\"success\">To Lobby</Button>\r\n        </LinkContainer>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Settings;\r\n","import Button from \"react-bootstrap/Button\";\r\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport { LinkContainer } from \"react-router-bootstrap\";\r\n\r\nconst Welcome = () => {\r\n  const ope = localStorage.getItem(\"ope\");\r\n  return (\r\n    <>\r\n      <Row>\r\n        <Col>\r\n          <h4>Welcome to the Game of Avalon</h4>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <ButtonGroup>\r\n          <LinkContainer to={ope ? \"/lobby\" : \"/login\"}>\r\n            <Button variant=\"primary\">Join Game</Button>\r\n          </LinkContainer>\r\n          <LinkContainer to=\"/about\">\r\n            <Button variant=\"outline-primary\">About</Button>\r\n          </LinkContainer>\r\n        </ButtonGroup>\r\n      </Row>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Welcome;\r\n","import { useContext } from \"react\";\r\nimport { Button, Col, Row } from \"react-bootstrap\";\r\nimport { LinkContainer } from \"react-router-bootstrap\";\r\nimport GameContext from \"../context/GameContext\";\r\nimport socket from \"../context/socket\";\r\nimport Links from \"../Links\";\r\nconst ResultView = () => {\r\n  const game = useContext(GameContext);\r\n\r\n  const isGood = game.users.find((user, i) => {\r\n    return user._id === socket.id;\r\n  })?.isGood;\r\n  const result = game.result && isGood;\r\n  return (\r\n    <>\r\n      <Row>\r\n        <Col>{result ? \"you win\" : \"you lose\"}</Col>\r\n      </Row>\r\n      <br />\r\n      <Row>\r\n        <Col>\r\n          <LinkContainer to={Links.Lobby}>\r\n            <Button variant=\"primary\">Back to Lobby</Button>\r\n          </LinkContainer>\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ResultView;\r\n","import { useContext, useState } from \"react\";\r\nimport { Button, Card, Col } from \"react-bootstrap\";\r\nimport Row from \"react-bootstrap/esm/Row\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport Roles from \"../interfaces/Roles\";\r\nimport User from \"../interfaces/User\";\r\nimport GameContext from \"./context/GameContext\";\r\nimport socket from \"./context/socket\";\r\nimport Links from \"./Links\";\r\n\r\nconst Welcome = () => {\r\n  const [selectedUser, setSelectedUser] = useState<User>();\r\n  const game = useContext(GameContext);\r\n\r\n  console.log(game);\r\n\r\n  if (game.result !== undefined) {\r\n    return <Redirect to={Links.Result}></Redirect>;\r\n  }\r\n\r\n  const isAssassin =\r\n    game.users.find((user, i) => {\r\n      return user._id === socket.id;\r\n    })?.role === Roles.Assassin;\r\n\r\n  let goodUsers = game.users.filter((user, i) => {\r\n    return user.isGood;\r\n  });\r\n\r\n  function guessUser() {\r\n    socket.emit(\"user-guess\", selectedUser);\r\n  }\r\n  if (game.hasStarted === false) {\r\n    return <Redirect to={Links.Result} />;\r\n  }\r\n  return (\r\n    <>\r\n      {!isAssassin ? (\r\n        <Row>\r\n          <Col>The Assassin is guessing Merlin</Col>\r\n        </Row>\r\n      ) : (\r\n        <>\r\n          <Row>\r\n            {goodUsers.map((user, i) => (\r\n              <Col xs={6} key={\"user:\" + i}>\r\n                <Card\r\n                  bg={user._id === selectedUser?._id ? \"primary\" : \"secondary\"}\r\n                  text=\"light\"\r\n                  className=\"mt-1\"\r\n                  onClick={() => {\r\n                    setSelectedUser(user);\r\n                  }}\r\n                >\r\n                  <Card.Body>{user.username}</Card.Body>\r\n                </Card>\r\n              </Col>\r\n            ))}\r\n          </Row>\r\n          <br />\r\n          <Row>\r\n            <Col>\r\n              <Button\r\n                onClick={() => {\r\n                  guessUser();\r\n                }}\r\n              >\r\n                guess merlin\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Welcome;\r\n","import React, { useState } from \"react\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\nimport \"./App.css\";\r\nimport Links from \"./components/Links\";\r\nimport Navbar from \"./components/Navbar\";\r\nimport About from \"./components/views/About\";\r\nimport GameView from \"./components/views/GameView\";\r\nimport Join from \"./components/views/Join\";\r\nimport Lobby from \"./components/views/Lobby\";\r\nimport Login from \"./components/views/Login\";\r\nimport Role from \"./components/views/Role\";\r\nimport Settings from \"./components/views/Settings\";\r\nimport Welcome from \"./components/views/Welcome\";\r\nimport GameContext from \"./components/context/GameContext\";\r\nimport Game, { MissionState } from \"./interfaces/Game\";\r\nimport socket from \"./components/context/socket\";\r\nimport Roles from \"./interfaces/Roles\";\r\nimport ResultView from \"./components/views/ResultView\";\r\nimport Merlin from \"./components/Merlin\";\r\n\r\nfunction App() {\r\n  const [game, setGame] = useState<Game>({\r\n    ope: \"\",\r\n    users: [],\r\n    totalPlayers: 0,\r\n    roles: [Roles.Merlin, Roles.Percival, Roles.Assassin, Roles.Morgana],\r\n    missions: [],\r\n    missionData: {\r\n      state: MissionState.Suggesting,\r\n      onMission: 0,\r\n      passedMissions: 0,\r\n      failedMissions: 0,\r\n    },\r\n    hasStarted: false,\r\n  } as Game);\r\n  socket.on(\"update-game\", (game: Game) => {\r\n    setGame(game);\r\n  });\r\n\r\n  return (\r\n    <Router>\r\n      <Route path=\"/\" component={Navbar}></Route>\r\n      <Container fluid className=\"App justify-content-center text-center\">\r\n        <Route exact path={Links.Welcome} component={Welcome}></Route>\r\n        <Route exact path={Links.Join} component={Join}></Route>\r\n        <Route exact path={Links.Login} component={Login}></Route>\r\n        <Route exact path={Links.About} component={About}></Route>\r\n        <GameContext.Provider value={game}>\r\n          <Route exact path={Links.Settings} component={Settings}></Route>\r\n          <Route exact path={Links.Lobby} component={Lobby}></Route>\r\n          <Route exact path={Links.Role} component={Role}></Route>\r\n          <Route exact path={Links.Game} component={GameView}></Route>\r\n          <Route exact path={Links.Merlin} component={Merlin}></Route>\r\n          <Route exact path={Links.Result} component={ResultView}></Route>\r\n        </GameContext.Provider>\r\n      </Container>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./index.css\";\n\n// Importing the Bootstrap CSS\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}